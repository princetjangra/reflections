When would you want to use a remote repository rather than keeping all your work local?
I would like to use remote repository either when I have a large scale project or I would have to work offline on some project.

Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with the remote repository?
Pulling changes lets user control over the number of changes he/she wants to pull. Hence, it frees clutter from so many changes. Staying up-to-date pulls unecessary changes from the repository.

Describe the differences between forks, clones, and branches. When would you use one instead of another?
Fork copies the repository from one github account to another github account. Clone copies the repository from github account to the local computer. Branches are commits of the original file, for original file, branch is master and file having commits in other than master branch is different branch as compared to master branch.
When we want to use someone else's project and modify it according to our wish and we are not allowed to modify their project, in that case we will use fork.
When we can modify someone else's project as a collaborator, we will use clone.
When we want to add more features in a project but do not wish to change the master project's files, we would use branch.

What is the benefit of having a copy of the last known state of the remote stored locally?
A contributer is able to view if he/she wants to update the files. Also, the user can start the further progress by having the last known state of the files causing better contribution.

How would you collaborate without using Git or Github? What would be easier, and what could be harder?
Collaboration without Git or Github would be possible only via network drives and online storage providers like Google Drive, Dropbox etc. by sharing files but it would be difficult for large projects. Easy thing would be that users do not need to learn to use those because they are as simple as browsing a file explorer. Harder thing would be that it becomes more difficult when using these alternatives for large projects and users get confused if not understands the things specified by the other collaborator.

When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?
When I want to add a new feature without compromising the errors in the master branch, I would like to make changes into a separate branch and also, I can create pull requests in the separate branch for people to review my work and make corrections in the files. Working in separate beanches also brings the extra work of pulling the branch locally and then merging the pull request which are not carried out while working in the master branch. Each have its own advantages and disadvantages.